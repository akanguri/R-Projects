# This completes the data preparation phase.
# In the Explore data phase we will explore the data vizually to get a better understanding of it.
# Sex , Men have a higher violation rate compared to women
tapply(train$violator,train$male,mean)
ggplot(data=train,aes(x=male,y=violator,fill=male))+
geom_bar(stat='summary',fun.y='mean')
# Race , Non white race have a higher violation rate compared to white
tapply(train$violator,train$race,mean)
ggplot(data=train,aes(x=race,y=violator,fill=race))+
geom_bar(stat='summary',fun.y='mean')
# Average Age of violator parolee is slightly lesser than non-violator parolee
tapply(train$age,train$violator,mean)
ggplot(data=train,aes(x=factor(violator),y=age,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')+
xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Violator"))+
scale_fill_discrete(name="Violators", breaks=c('0', '1'),labels=c('Non-Violator', 'Violator'))
# This chart show the age frequency of parolee.The highest parolee's are in their early twenty's
ggplot(data=train,aes(x=age,color=factor(multiple.offenses)))+
geom_freqpoly(size=2) + ylab('Count of parolee')
# State , Lousiana has the highest violators
tapply(train$violator,train$state,mean)
ggplot(data=train,aes(x=state,y=violator,fill=state))+
geom_bar(stat='summary',fun.y='mean')
# Time.served , Violators have served lesser time in prision than non violators
tapply(train$time.served,train$violator,mean)
ggplot(data=train,aes(x=factor(violator),y=time.served,fill=factor(violator)))+geom_bar(stat='summary',fun.y='mean')+
xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Violator"))+
scale_fill_discrete(name="Violators",breaks=c('0', '1'),labels=c('Non-Violator', 'Violator'))
## Data Modeling Phase
# Create a Logistic Regression Model with violator as the target variable and all
# other variables as the predictor variables
model1 = glm(violator~.,train,family="binomial")
# what is the interpretation of coefficient of multiple.offenses?
# multiple.offenses has p value <.01 showing strong co-relation.
# The AIC value is the Measure of relative quality of model. The value is 254.59
# We will compare this with the other model.Lower is better
summary(model1)
# a parolee who committed multiple offenses is 5 times more likely to violate parole
exp(model1$coefficient['multiple.offensesyes'])
# Consider a parolee who is a white male, aged 50 years at prison release,
# from the state of Maryland, served 3 months,
# had a maximum sentence of 12 months, did not commit multiple offenses,
# and committed a larceny. What are the odds of this individual being a violator?
# What is the probability of this person being a violator?
varCoefficients = c(model1$coefficient[1:13]) # list of all coefficients from model
varScores = c(1,1,1,50,0,0,0,3,12,0,1,0,0)    # list of all var based on above description
logOdds = sum(varCoefficients*varScores)      # log odds is equal to sum of product of coeffs and var scores
# odds of being a violator
oddsOfBeingAViolator = exp(logOdds); oddsOfBeingAViolator
# probability of being a violator. There is a 14.5% chance that this person will be a repeat violator
probabilityViolator = 1/(1+exp(-logOdds));probabilityViolator
# Now that we created the model and tested on the training data set, let us run it against
# the Test dataset and see how well it performs.
# Applying predictions to test sample
predictTest = predict(model1,test,type="response")
# what is the max predicted probability
summary(predictTest)
max(predictTest)
#ggplot(data=data.frame(pred),aes(x=pred))+
#  geom_histogram(fill='steelblue3')
# Construct a Classification table or Confusion matrix using 0.5 threshold (cutoff)
#
x = table(test$violator,predictTest>0.50); x
# Accuracy of the model. Higher the value, more accurate the model
accuracy = sum(x[1,1],x[2,2])/nrow(test); accuracy
# Specificity and Sentivity of the model
# Specificity -> True Negative/ ( True Negative+ False Positive)
# Sentivity   -> True Positive/ (False negative _ True Positive)
specificity = x[1,1]/sum(x[1,1],x[1,2]); specificity
sensitivity = x[2,2]/sum(x[2,1],x[2,2]); sensitivity
baseline = (167+12)/(167+12+11+12); baseline
## Checking for different cutoff values
## specificity is important as False Positives are costly errors for this data
## for high specificity, threshold should be high
x = table(test$violator,predictTest>0.70);x
accuracy = sum(x[1,1],x[2,2])/nrow(test); accuracy
specificity = x[1,1]/sum(x[1,1],x[1,2]); specificity
sensitivity = x[2,2]/sum(x[2,1],x[2,2]); sensitivity
## ROC curves allow us to visualize the impact of different thresholds
## on Specificity and Sensitivity
## AUC is model performance measure that is independent of any particular threshold
## High threshold => Higher specificity and Lower sensitivity
## Low threshold => Lower specificity and higher sensitivity
library(ROCR)
ROCRpred1 = prediction(predictTest,test$violator)
as.numeric(performance(ROCRpred1,"auc")@y.values) # auc measure
## construct plot
ROCRperf1 = performance(ROCRpred1,"tpr","fpr")
#plot(ROCRperf) # basic plot
#plot(ROCRperf,xlab="1 - Specificity",ylab="Sensitivity") # relabled axes
#plot(ROCRperf,colorize=TRUE) # color coded ROC curve
plot(ROCRperf1,colorize=TRUE,print.cutoffs.at=seq(0,1,0.2),text.adj=c(-0.3,2),xlab="False Positive Rate (1 - Specificity) ",ylab="True Positive Rate (Sensitivity)") # color coded and annotated ROC curve
###########################################
# How would this compare to a tree model?
# Would a tree model generate a higher AUC on the test data?
# Would a tree model be better than Logistics regression model?
library(rpart)
library(rpart.plot)
tree = rpart(violator~.,data=train,method="class",control=rpart.control(minbucket=2))
prp(tree)
library(rattle)
fancyRpartPlot(tree)
predTree = predict(tree,newdata=test,type="class")
x = table(test$violator,predTree);x
accuracy = sum(x[1,1],x[2,2])/nrow(test); accuracy
specificity = x[1,1]/sum(x[1,1],x[1,2]); specificity
sensitivity = x[2,2]/sum(x[2,1],x[2,2]); sensitivity
predTreeProb = predict(tree,newdata=test,type="prob")
ROCRpred = prediction(predTreeProb[,2],test$violator)
as.numeric(performance(ROCRpred,"auc")@y.values) # auc measure
## construct plot
ROCRperf = performance(ROCRpred,"tpr","fpr")
#plot(ROCRperf) # basic plot
#plot(ROCRperf,xlab="1 - Specificity",ylab="Sensitivity") # relabled axes
#plot(ROCRperf,colorize=TRUE) # color coded ROC curve
plot(ROCRperf,colorize=TRUE,print.cutoffs.at=seq(0,1,0.2),text.adj=c(-0.3,2),xlab="False Positive Rate (1 - Specificity) ",ylab="True Positive Rate (Sensitivity)") # color coded and annotated ROC curve
## Conclusion
#  The Logistic regression model seems to perform better than the tree model in this scenario
#  It has higher AUC (Area under curve) value
predTree_train = predict(tree,data=train,type="class")
x = table(train$violator,predTree_train);x
accuracy = sum(x[1,1],x[2,2])/nrow(train); accuracy
specificity = x[1,1]/sum(x[1,1],x[1,2]); specificity
sensitivity = x[2,2]/sum(x[2,1],x[2,2]); sensitivity
library(ggplot2)
setwd('/Users/Ameet/Box Sync/Ameet/GitHub/R-Projects/parole')
setwd('/Users/Ameet/Box Sync/Ameet/GitHub/R-Projects/parole')
plot(cars)
setwd('/Users/Ameet/Box Sync/Ameet/GitHub/R-Projects/parole')
parole= read.csv("parole.csv")
setwd('/Users/Ameet/Box Sync/Ameet/GitHub/R-Projects/parole')
parole= read.csv("parole.csv")
names(parole)
summary(parole)
table(parole$violator)  # how many are violators
table(parole$violator)  # how many are violators
parole$male = factor(parole$male,
levels = c(0,1),
labels = c("women", "men"))
parole$race = factor(parole$race,
levels=c(1,2),
labels=c("White","Not White"))
parole$state = factor(parole$state,
levels = c(1,2,3,4),
labels = c("Other","Kentucky","Lousiana","Virginia"))
parole$crime = factor(parole$crime,
levels = c(1,2,3,4),
labels=c("Other","Larceny","drug","driving"))
parole$multiple.offenses = factor(parole$multiple.offenses,
levels = c(0,1),
labels = c("no", "yes"))
library(caTools)
set.seed(199)
split = sample.split(parole$violator,SplitRatio=0.7)
train = subset(parole,split==TRUE)
test = subset(parole,split==FALSE)
nrow(train)
nrow(test)
library(ggplot2)
tapply(train$violator,train$male,mean)
ggplot(data=train,aes(x=male,y=violator,fill=male)) + geom_bar(stat='summary',fun.y='mean')
tapply(train$violator,train$race,mean)
ggplot(data=train,aes(x=race,y=violator,fill=race)) + geom_bar(stat='summary',fun.y='mean')
tapply(train$age,train$violator,mean)
ggplot(data=train,aes(x=factor(violator),y=age,fill=factor(violator)))+geom_bar(stat='summary',fun.y='mean')+
xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Violator"))+
scale_fill_discrete(name="Violators", breaks=c('0', '1'),labels=c('Non-Violator', 'Violator'))
ggplot(data=train,aes(x=age,color=factor(multiple.offenses)))+geom_freqpoly(size=2) + ylab('Count of parolee')
tapply(train$violator,train$state,mean)
ggplot(data=train,aes(x=state,y=violator,fill=state))+geom_bar(stat='summary',fun.y='mean')
tapply(train$time.served,train$violator,mean)
ggplot(data=train,aes(x=factor(violator),y=time.served,fill=factor(violator)))+geom_bar(stat='summary',fun.y='mean')+ xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Violator"))+
scale_fill_discrete(name="Violators",breaks=c('0', '1'),labels=c('Non-Violator', 'Violator'))
model1 = glm(violator~.,train,family="binomial")
summary(model1)
exp(model1$coefficient['multiple.offensesyes'])
varCoefficients = c(model1$coefficient[1:13]) # list of all coefficients from model
varScores = c(1,1,1,50,0,0,0,3,12,0,1,0,0)    # list of all var based on above description
logOdds = sum(varCoefficients*varScores)      # log odds is equal to sum of product of coeffs and var scores
oddsOfBeingAViolator = exp(logOdds); oddsOfBeingAViolator
probabilityViolator = 1/(1+exp(-logOdds));probabilityViolator
predictTest = predict(model1,test,type="response")
max(predictTest)
predictTest
ggplot(data=data.frame(predictTest),aes(x=predTest))+
geom_histogram(fill='steelblue3')
ggplot(data=data.frame(predictTest),aes(x=predictTest))+
geom_histogram(fill='steelblue3')
cMatrix = table(test$violator,predictTest>0.50); cMatrix
accuracy = sum(x[1,1],x[2,2])/nrow(test); accuracy
accuracy = sum(cMatrix[1,1],cMatrix[2,2])/nrow(test); accuracy
specificity = x[1,1]/sum(x[1,1],x[1,2]); specificity
specificity = cMatrix[1,1]/sum(cMatrix[1,1],cMatrix[1,2]); specificity
sensitivity = cMatrix[2,2]/sum(cMatrix[2,1],cMatrix[2,2]); sensitivity
baseline = (167+12)/(167+12+11+12); baseline
x = table(test$violator,predictTest>0.70);x
accuracy = sum(x[1,1],x[2,2])/nrow(test); accuracy
specificity = x[1,1]/sum(x[1,1],x[1,2]); specificity
sensitivity = x[2,2]/sum(x[2,1],x[2,2]); sensitivity
library(ROCR)
ROCRpred1 = prediction(predictTest,test$violator)
as.numeric(performance(ROCRpred1,"auc")@y.values) # auc measure
ROCRperf1 = performance(ROCRpred1,"tpr","fpr")
plot(ROCRperf1,colorize=TRUE,print.cutoffs.at=seq(0,1,0.2),text.adj=c(-0.3,2),xlab="False Positive Rate (1 - Specificity) ",ylab="True Positive Rate (Sensitivity)") # color coded and annotated ROC curve
library(rpart)
library(rpart.plot)
library(rattle)
tree = rpart(violator~.,data=train,method="class",control=rpart.control(minbucket=2))
prp(tree)
fancyRpartPlot(tree)
predTree = predict(tree,newdata=test,type="class")
x = table(test$violator,predTree);x
accuracy = sum(x[1,1],x[2,2])/nrow(test); accuracy
specificity = x[1,1]/sum(x[1,1],x[1,2]); specificity
sensitivity = x[2,2]/sum(x[2,1],x[2,2]); sensitivity
predTreeProb = predict(tree,newdata=test,type="prob")
ROCRpred = prediction(predTreeProb[,2],test$violator)
as.numeric(performance(ROCRpred,"auc")@y.values) # auc measure
## construct plot
ROCRperf = performance(ROCRpred,"tpr","fpr")
plot(ROCRperf,colorize=TRUE,print.cutoffs.at=seq(0,1,0.2),text.adj=c(-0.3,2),xlab="False Positive Rate (1 - Specificity) ",ylab="True Positive Rate (Sensitivity)") # color coded and annotated ROC curve
ggplot(data=train,aes(x=age,color=factor(multiple.offenses)))+geom_freqpoly(size=2) + ylab('Count of parolee')
tapply(train$violator,train$state,mean)
ggplot(data=train,aes(x=state,y=violator,fill=state))+geom_bar(stat='summary',fun.y='mean')
tapply(train$time.served,train$violator,mean)
ggplot(data=train,aes(x=factor(violator),y=time.served,fill=factor(violator)))+geom_bar(stat='summary',fun.y='mean')+ xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Violator"))+
scale_fill_discrete(name="Violators",breaks=c('0', '1'),labels=c('Non-Violator', 'Violator'))
model1 = glm(violator~.,train,family="binomial")
model1 = glm(violator~.,train,family="binomial")
summary(model1)
exp(model1$coefficient['multiple.offensesyes'])
varCoefficients = c(model1$coefficient[1:13]) # list of all coefficients from model
varScores = c(1,1,1,50,0,0,0,3,12,0,1,0,0)    # list of all var based on above description
logOdds = sum(varCoefficients*varScores)      # log odds is equal to sum of product of coeffs and var scores
varCoefficients = c(model1$coefficient[1:13]) # list of all coefficients from model
varScores = c(1,1,1,50,0,0,0,3,12,0,1,0,0)    # list of all var based on above description
logOdds = sum(varCoefficients*varScores)      # log odds is equal to sum of product of coeffs and var scores
oddsOfBeingAViolator = exp(logOdds); oddsOfBeingAViolator
probabilityViolator = 1/(1+exp(-logOdds));probabilityViolator
predictTest = predict(model1,test,type="response")
max(predictTest)
predictTest = predict(model1,test,type="response")
max(predictTest)
cMatrix = table(test$violator,predictTest>0.50); cMatrix
accuracy = sum(cMatrix[1,1],cMatrix[2,2])/nrow(test); accuracy
specificity = cMatrix[1,1]/sum(cMatrix[1,1],cMatrix[1,2]); specificity
sensitivity = cMatrix[2,2]/sum(cMatrix[2,1],cMatrix[2,2]); sensitivity
baseline = (167+12)/(167+12+11+12); baseline
x = table(test$violator,predictTest>0.70);x
accuracy = sum(x[1,1],x[2,2])/nrow(test); accuracy
specificity = x[1,1]/sum(x[1,1],x[1,2]); specificity
sensitivity = x[2,2]/sum(x[2,1],x[2,2]); sensitivity
library(ROCR)
ROCRpred1 = prediction(predictTest,test$violator)
as.numeric(performance(ROCRpred1,"auc")@y.values) # auc measure
ROCRperf1 = performance(ROCRpred1,"tpr","fpr")
plot(ROCRperf1,colorize=TRUE,print.cutoffs.at=seq(0,1,0.2),text.adj=c(-0.3,2),xlab="False Positive Rate (1 - Specificity) ",ylab="True Positive Rate (Sensitivity)") # color coded and annotated ROC curve
library(rpart)
library(rpart.plot)
library(rattle)
tree = rpart(violator~.,data=train,method="class",control=rpart.control(minbucket=2))
prp(tree)
fancyRpartPlot(tree)
predTree = predict(tree,newdata=test,type="class")
x = table(test$violator,predTree);x
accuracy = sum(x[1,1],x[2,2])/nrow(test); accuracy
specificity = x[1,1]/sum(x[1,1],x[1,2]); specificity
sensitivity = x[2,2]/sum(x[2,1],x[2,2]); sensitivity
predTreeProb = predict(tree,newdata=test,type="prob")
ROCRpred = prediction(predTreeProb[,2],test$violator)
as.numeric(performance(ROCRpred,"auc")@y.values) # auc measure
## construct plot
ROCRperf = performance(ROCRpred,"tpr","fpr")
plot(ROCRperf,colorize=TRUE,print.cutoffs.at=seq(0,1,0.2),text.adj=c(-0.3,2),xlab="False Positive Rate (1 - Specificity) ",ylab="True Positive Rate (Sensitivity)") # color coded and annotated ROC curve
specificity = cMatrix[1,1]/sum(cMatrix[1,1],cMatrix[1,2]); specificity
sensitivity = cMatrix[2,2]/sum(cMatrix[2,1],cMatrix[2,2]); sensitivity
specificity = cMatrix[1,1]/sum(cMatrix[1,1],cMatrix[1,2]); specificity
sensitivity = cMatrix[2,2]/sum(cMatrix[2,1],cMatrix[2,2]); sensitivity
x = table(test$violator,predictTest>0.70);x
accuracy = sum(x[1,1],x[2,2])/nrow(test); accuracy
specificity = x[1,1]/sum(x[1,1],x[1,2]); specificity
sensitivity = x[2,2]/sum(x[2,1],x[2,2]); sensitivity
x = table(test$violator,predictTest>0.70);x
accuracy = sum(x[1,1],x[2,2])/nrow(test); accuracy
specificity = x[1,1]/sum(x[1,1],x[1,2]); specificity
sensitivity = x[2,2]/sum(x[2,1],x[2,2]); sensitivity
x = table(test$violator,predictTest>0.70);x
accuracy = sum(x[1,1],x[2,2])/nrow(test); accuracy
specificity = x[1,1]/sum(x[1,1],x[1,2]); specificity
sensitivity = x[2,2]/sum(x[2,1],x[2,2]); sensitivity
x = table(test$violator,predictTest>0.70);x
accuracy = sum(x[1,1],x[2,2])/nrow(test); accuracy
specificity = x[1,1]/sum(x[1,1],x[1,2]); specificity
sensitivity = x[2,2]/sum(x[2,1],x[2,2]); sensitivity
library(ROCR)
ROCRpred1 = prediction(predictTest,test$violator)
as.numeric(performance(ROCRpred1,"auc")@y.values) # auc measure
ROCRperf1 = performance(ROCRpred1,"tpr","fpr")
plot(ROCRperf1,colorize=TRUE,print.cutoffs.at=seq(0,1,0.2),text.adj=c(-0.3,2),xlab="False Positive Rate (1 - Specificity) ",ylab="True Positive Rate (Sensitivity)") # color coded and annotated ROC curve
library(rpart)
library(rpart.plot)
library(rattle)
tree = rpart(violator~.,data=train,method="class",control=rpart.control(minbucket=2))
prp(tree)
fancyRpartPlot(tree)
predTree = predict(tree,newdata=test,type="class")
x = table(test$violator,predTree);x
accuracy = sum(x[1,1],x[2,2])/nrow(test); accuracy
specificity = x[1,1]/sum(x[1,1],x[1,2]); specificity
sensitivity = x[2,2]/sum(x[2,1],x[2,2]); sensitivity
x = table(test$violator,predTree);x
accuracy = sum(x[1,1],x[2,2])/nrow(test); accuracy
specificity = x[1,1]/sum(x[1,1],x[1,2]); specificity
sensitivity = x[2,2]/sum(x[2,1],x[2,2]); sensitivity
predTreeProb = predict(tree,newdata=test,type="prob")
ROCRpred = prediction(predTreeProb[,2],test$violator)
as.numeric(performance(ROCRpred,"auc")@y.values) # auc measure
## construct plot
ROCRperf = performance(ROCRpred,"tpr","fpr")
plot(ROCRperf,colorize=TRUE,print.cutoffs.at=seq(0,1,0.2),text.adj=c(-0.3,2),xlab="False Positive Rate (1 - Specificity) ",ylab="True Positive Rate (Sensitivity)") # color coded and annotated ROC curve
setwd('/Users/Ameet/Box Sync/Ameet/GitHub/R-Projects/parole')
parole= read.csv("parole.csv")
names(parole)
summary(parole)
table(parole$violator)  # how many are violators
parole$male = factor(parole$male,
levels = c(0,1),
labels = c("women", "men"))
parole$race = factor(parole$race,
levels=c(1,2),
labels=c("White","Not White"))
parole$state = factor(parole$state,
levels = c(1,2,3,4),
labels = c("Other","Kentucky","Louisiana","Virginia"))
parole$crime = factor(parole$crime,
levels = c(1,2,3,4),
labels=c("Other","Larceny","drug","driving"))
parole$multiple.offenses = factor(parole$multiple.offenses,
levels = c(0,1),
labels = c("no", "yes"))
library(caTools)
set.seed(199)
split = sample.split(parole$violator,SplitRatio=0.7)
train = subset(parole,split==TRUE)
test = subset(parole,split==FALSE)
nrow(train)
nrow(test)
library(ggplot2)
tapply(train$violator,train$male,mean)
ggplot(data=train,aes(x=male,y=violator,fill=male)) + geom_bar(stat='summary',fun.y='mean')
tapply(train$violator,train$race,mean)
ggplot(data=train,aes(x=race,y=violator,fill=race)) + geom_bar(stat='summary',fun.y='mean')
tapply(train$age,train$violator,mean)
ggplot(data=train,aes(x=factor(violator),y=age,fill=factor(violator)))+geom_bar(stat='summary',fun.y='mean')+
xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Violator"))+
scale_fill_discrete(name="Violators", breaks=c('0', '1'),labels=c('Non-Violator', 'Violator'))
ggplot(data=train,aes(x=age,color=factor(multiple.offenses)))+geom_freqpoly(size=2) + ylab('Count of parolee')
tapply(train$violator,train$state,mean)
ggplot(data=train,aes(x=state,y=violator,fill=state))+geom_bar(stat='summary',fun.y='mean')
tapply(train$time.served,train$violator,mean)
ggplot(data=train,aes(x=factor(violator),y=time.served,fill=factor(violator)))+geom_bar(stat='summary',fun.y='mean')+ xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Violator"))+
scale_fill_discrete(name="Violators",breaks=c('0', '1'),labels=c('Non-Violator', 'Violator'))
model1 = glm(violator~.,train,family="binomial")
summary(model1)
exp(model1$coefficient['multiple.offensesyes'])
varCoefficients = c(model1$coefficient[1:13]) # list of all coefficients from model
varScores = c(1,1,1,50,0,0,0,3,12,0,1,0,0)    # list of all var based on above description
logOdds = sum(varCoefficients*varScores)      # log odds is equal to sum of product of coeffs and var scores
oddsOfBeingAViolator = exp(logOdds); oddsOfBeingAViolator
probabilityViolator = 1/(1+exp(-logOdds));probabilityViolator
predictTest = predict(model1,test,type="response")
max(predictTest)
cMatrix = table(test$violator,predictTest>0.50); cMatrix
accuracy = sum(cMatrix[1,1],cMatrix[2,2])/nrow(test); accuracy
specificity = cMatrix[1,1]/sum(cMatrix[1,1],cMatrix[1,2]); specificity
sensitivity = cMatrix[2,2]/sum(cMatrix[2,1],cMatrix[2,2]); sensitivity
x = table(test$violator,predictTest>0.70);x
accuracy = sum(x[1,1],x[2,2])/nrow(test); accuracy
specificity = x[1,1]/sum(x[1,1],x[1,2]); specificity
sensitivity = x[2,2]/sum(x[2,1],x[2,2]); sensitivity
library(ROCR)
ROCRpred1 = prediction(predictTest,test$violator)
as.numeric(performance(ROCRpred1,"auc")@y.values) # auc measure
ROCRperf1 = performance(ROCRpred1,"tpr","fpr")
plot(ROCRperf1,colorize=TRUE,print.cutoffs.at=seq(0,1,0.2),text.adj=c(-0.3,2),xlab="False Positive Rate (1 - Specificity) ",ylab="True Positive Rate (Sensitivity)") # color coded and annotated ROC curve
library(rpart)
library(rpart.plot)
library(rattle)
tree = rpart(violator~.,data=train,method="class",control=rpart.control(minbucket=2))
prp(tree)
fancyRpartPlot(tree)
predTree = predict(tree,newdata=test,type="class")
x = table(test$violator,predTree);x
accuracy = sum(x[1,1],x[2,2])/nrow(test); accuracy
specificity = x[1,1]/sum(x[1,1],x[1,2]); specificity
sensitivity = x[2,2]/sum(x[2,1],x[2,2]); sensitivity
predTreeProb = predict(tree,newdata=test,type="prob")
ROCRpred = prediction(predTreeProb[,2],test$violator)
as.numeric(performance(ROCRpred,"auc")@y.values) # auc measure
## construct plot
ROCRperf = performance(ROCRpred,"tpr","fpr")
plot(ROCRperf,colorize=TRUE,print.cutoffs.at=seq(0,1,0.2),text.adj=c(-0.3,2),xlab="False Positive Rate (1 - Specificity) ",ylab="True Positive Rate (Sensitivity)") # color coded and annotated ROC curve
setwd('/Users/Ameet/Box Sync/Ameet/GitHub/R-Projects/NY Traffic')
traffic=read.csv('/Users/Ameet/Box Sync/Ameet/Classes/R/traffic/NYPD_Motor_Vehicle_Collisions.csv')
str(traffic)
View(head(traffic))
traffic$CONTRIBUTING.FACTOR=traffic$CONTRIBUTING.FACTOR.VEHICLE.1
table(traffic$VEHICLE.TYPE.CODE.1)
levels(traffic$VEHICLE.TYPE.CODE.5)
levels(traffic$VEHICLE.TYPE.CODE.1)=c('Unknown','Emergency Vehicles','Two Wheelers','Public Transport','Emergency Vehicles','Commerical Vehicles','Commerical Vehicles','Two Wheelers','Other','Passenger Vehicles','Two Wheelers','Passenger Vehicles','Two Wheelers','Commerical Vehicles','Passenger Vehicles','Taxi','Unknown','Commerical Vehicles')
levels(traffic$VEHICLE.TYPE.CODE.2)=c('Unknown','Emergency Vehicles','Two Wheelers','Public Transport','Emergency Vehicles','Commerical Vehicles','Commerical Vehicles','Two Wheelers','Other','Passenger Vehicles','Two Wheelers','Passenger Vehicles','Two Wheelers','Commerical Vehicles','Passenger Vehicles','Taxi','Unknown','Commerical Vehicles')
levels(traffic$VEHICLE.TYPE.CODE.3)=c('Unknown','Emergency Vehicles','Two Wheelers','Public Transport','Emergency Vehicles','Commerical Vehicles','Commerical Vehicles','Two Wheelers','Other','Passenger Vehicles','Two Wheelers','Passenger Vehicles','Two Wheelers','Commerical Vehicles','Passenger Vehicles','Taxi','Unknown','Commerical Vehicles')
levels(traffic$VEHICLE.TYPE.CODE.4)=c('Unknown','Emergency Vehicles','Two Wheelers','Public Transport','Emergency Vehicles','Commerical Vehicles','Commerical Vehicles','Two Wheelers','Other','Passenger Vehicles','Two Wheelers','Passenger Vehicles','Two Wheelers','Commerical Vehicles','Passenger Vehicles','Taxi','Unknown','Commerical Vehicles')
levels(traffic$VEHICLE.TYPE.CODE.5)=c('Unknown','Emergency Vehicles','Two Wheelers','Public Transport','Commerical Vehicles','Commerical Vehicles','Two Wheelers','Other','Passenger Vehicles','Passenger Vehicles','Two Wheelers','Commerical Vehicles','Passenger Vehicles','Taxi','Unknown','Commerical Vehicles')
levels(traffic$VEHICLE.TYPE.CODE.1)
library('ggmap')
library('ggmap')
sort(table(traffic$LATITUDE),decreasing = TRUE)
sort(table(traffic$LONGITUDE),decreasing = TRUE)
levels(traffic$CONTRIBUTING.FACTOR.VEHICLE.1)
sort(table(traffic$CONTRIBUTING.FACTOR.VEHICLE.1))
parameters=c("","Unspecified","Other Vehicular")
NROW(traffic[traffic$CONTRIBUTING.FACTOR.VEHICLE.1 %in% 'Other Vehicular',]$CONTRIBUTING.FACTOR.VEHICLE.1)
traffic[(traffic$CONTRIBUTING.FACTOR.VEHICLE.1 %in% 'Other Vehicular' & !(traffic$CONTRIBUTING.FACTOR.VEHICLE.2 %in% parameters)),]$CONTRIBUTING.FACTOR.VEHICLE.1=traffic[(traffic$CONTRIBUTING.FACTOR.VEHICLE.1 %in% 'Other Vehicular' & !(traffic$CONTRIBUTING.FACTOR.VEHICLE.2 %in% parameters)),]$CONTRIBUTING.FACTOR.VEHICLE.2
NROW(traffic[traffic$CONTRIBUTING.FACTOR.VEHICLE.1 %in% 'Other Vehicular',]$CONTRIBUTING.FACTOR.VEHICLE.1)
levels(traffic$CONTRIBUTING.FACTOR.VEHICLE.1)
sort(table(traffic$CONTRIBUTING.FACTOR.VEHICLE.1))
CONTRIBUTING.FACTOR.LEVELS= c('Unspecified', 'Mechanical Failure', 'Unsafe Driving' , 'Dizzy Driving' ,'Miscellaneous', 'Unsafe Driving', 'Mechanical Failure','Use of Electronic Devices', 'Use of Electronic Devices', 'Driver Distraction', 'Unsafe Driving', 'Rule Violations',
'Dizzy Driving', 'Rule Violations', 'Rule Violations', 'Driver Distraction', 'Driver Distraction', 'Unsafe Driving',
'Restricted View', 'Mechanical Failure', 'Driver Distraction', 'NY Infrastructure Issues', 'Driver Distraction' ,'NY Infrastructure Issues',
'Use of Electronic Devices', 'NY Infrastructure Issues', 'Miscellaneous', 'Driver Distraction', 'Miscellaneous', 'Driver Distraction',
'Rule Violations', 'NY Infrastructure Issues', 'NY Infrastructure Issues', 'Miscellaneous',
'Miscellaneous', 'Dizzy Driving', 'Driver Distraction', 'NY Infrastructure Issues',
'Mechanical Failure', 'Mechanical Failure', 'Mechanical Failure', 'NY Infrastructure Issues',
'Rule Violations', 'Rule Violations', 'Unsafe Driving', 'Unsafe Driving', 'Unspecified','Restricted View','Restricted View')
levels(traffic$CONTRIBUTING.FACTOR.VEHICLE.1)=CONTRIBUTING.FACTOR.LEVELS
str(traffic)
write.csv('/Users/Ameet/Box Sync/Ameet/Classes/R/traffic/NYPD_Motor_Vehicle_CollisionsNew.csv')
write.csv('/Users/Ameet/Box Sync/Ameet/Classes/R/traffic/NYPD_Motor_Vehicle_CollisionsNew.csv')
write.csv(x = traffic,file ='/Users/Ameet/Box Sync/Ameet/Classes/R/traffic/NYPD_Motor_Vehicle_CollisionsNew.csv')
setwd('/Users/Ameet/Box Sync/Ameet/GitHub/R-Projects/NY Traffic')
# Read Traffic collisions CSV file
traffic=read.csv('/Users/Ameet/Box Sync/Ameet/Classes/R/traffic/NYPD_Motor_Vehicle_Collisions.csv')
# Review the file structure
str(traffic)
# View a few rows
View(head(traffic))
# Since the major contributing factors are specified in Column CONTIRBUTING.FACTOR.1 we can take
# this as the reason for the accident.
#traffic$CONTRIBUTING.FACTOR=traffic$CONTRIBUTING.FACTOR.VEHICLE.1
# Check the different type of vehicles that are involved in an accident
table(traffic$VEHICLE.TYPE.CODE.1)
# Combine the vehicles to a smaller set of categories
# 1. Two wheeler	<- BICYCLE,	MOTORCYCLE,	SCOOTER,	PEDICAB
# 2. Emergency vehicles <-	AMBULANCE,	FIRE TRUCK
# 3. Commerical Vehicles <-	LARGE COM VEH(6 OR MORE TIRES), SMALL COM VEH(4 TIRES),	DLIVERY VEHICLE,	VAN
# 4. Taxi <-	TAXI
# 5. Passenger vehicle<-	PASSENGER VEHICLE,	SPORT UTILITY / STATION WAGON,	PICK-UP TRUCK
# 6. Public Transport <-	BUS
# 7. Other <-	OTHER
# 8. Unkown <- UNKNOWN, ""
levels(traffic$VEHICLE.TYPE.CODE.5)
levels(traffic$VEHICLE.TYPE.CODE.1)=c('Unknown','Emergency Vehicles','Two Wheelers','Public Transport','Emergency Vehicles','Commerical Vehicles','Commerical Vehicles','Two Wheelers','Other','Passenger Vehicles','Two Wheelers','Passenger Vehicles','Two Wheelers','Commerical Vehicles','Passenger Vehicles','Taxi','Unknown','Commerical Vehicles')
levels(traffic$VEHICLE.TYPE.CODE.2)=c('Unknown','Emergency Vehicles','Two Wheelers','Public Transport','Emergency Vehicles','Commerical Vehicles','Commerical Vehicles','Two Wheelers','Other','Passenger Vehicles','Two Wheelers','Passenger Vehicles','Two Wheelers','Commerical Vehicles','Passenger Vehicles','Taxi','Unknown','Commerical Vehicles')
levels(traffic$VEHICLE.TYPE.CODE.3)=c('Unknown','Emergency Vehicles','Two Wheelers','Public Transport','Emergency Vehicles','Commerical Vehicles','Commerical Vehicles','Two Wheelers','Other','Passenger Vehicles','Two Wheelers','Passenger Vehicles','Two Wheelers','Commerical Vehicles','Passenger Vehicles','Taxi','Unknown','Commerical Vehicles')
levels(traffic$VEHICLE.TYPE.CODE.4)=c('Unknown','Emergency Vehicles','Two Wheelers','Public Transport','Emergency Vehicles','Commerical Vehicles','Commerical Vehicles','Two Wheelers','Other','Passenger Vehicles','Two Wheelers','Passenger Vehicles','Two Wheelers','Commerical Vehicles','Passenger Vehicles','Taxi','Unknown','Commerical Vehicles')
levels(traffic$VEHICLE.TYPE.CODE.5)=c('Unknown','Emergency Vehicles','Two Wheelers','Public Transport','Commerical Vehicles','Commerical Vehicles','Two Wheelers','Other','Passenger Vehicles','Passenger Vehicles','Two Wheelers','Commerical Vehicles','Passenger Vehicles','Taxi','Unknown','Commerical Vehicles')
# Review changes
levels(traffic$VEHICLE.TYPE.CODE.1)
# A few of the longitude and latitude values are missing. However the street names , cross street names are provided.
# Using ggmap get approximate longitude and lattitude information based on street details
library('ggmap')
sort(table(traffic$LATITUDE),decreasing = TRUE)
sort(table(traffic$LONGITUDE),decreasing = TRUE)
# Looking at the data, the CONTRIBUTING.FACTOR.VEHICLE.1 seems to be the dominant reason for accident.
# Narowing down this to a more generalized category.
levels(traffic$CONTRIBUTING.FACTOR.VEHICLE.1)
sort(table(traffic$CONTRIBUTING.FACTOR.VEHICLE.1))
# Check to see if secondary reason is specified if the primary is missing. This shows that is the primary reason is
# either blank or "Unspecified" then the secondary ( or further) columns are also blank
parameters=c("","Unspecified","Other Vehicular")
#########  View(traffic[(traffic$CONTRIBUTING.FACTOR.VEHICLE.1 %in% 'Other Vehicular' & !(traffic$CONTRIBUTING.FACTOR.VEHICLE.2 %in% parameters)),])
NROW(traffic[traffic$CONTRIBUTING.FACTOR.VEHICLE.1 %in% 'Other Vehicular',]$CONTRIBUTING.FACTOR.VEHICLE.1)
traffic[(traffic$CONTRIBUTING.FACTOR.VEHICLE.1 %in% 'Other Vehicular' & !(traffic$CONTRIBUTING.FACTOR.VEHICLE.2 %in% parameters)),]$CONTRIBUTING.FACTOR.VEHICLE.1=traffic[(traffic$CONTRIBUTING.FACTOR.VEHICLE.1 %in% 'Other Vehicular' & !(traffic$CONTRIBUTING.FACTOR.VEHICLE.2 %in% parameters)),]$CONTRIBUTING.FACTOR.VEHICLE.2
NROW(traffic[traffic$CONTRIBUTING.FACTOR.VEHICLE.1 %in% 'Other Vehicular',]$CONTRIBUTING.FACTOR.VEHICLE.1)
# Narrow the accident causes to a smaller group
# “Unsafe driving” -  "Aggressive Driving/Road Rage”, "Following Too Closely”, "Unsafe Speed”, "Unsafe Lane Changing”,"Backing Unsafely"
# “Dizzy Driving” - "Drugs (Illegal)”, "Alcohol Involvement”,"Prescription Medication”
# “Driver distraction” - "Fell Asleep" , "Fatigued/Drowsy”, "Driver Inattention/Distraction”,  "Lost Consciousness”, "Illness” , "Outside Car Distraction”, "Passenger Distraction”,"Reaction to Other Uninvolved Vehicle"
# “Use of electronic devices” - "Cell Phone (hands-free)”, "Other Electronic Device”, "Cell Phone (hand-held)"
# “Rules violations” - "Traffic Control Disregarded”,  "Turning Improperly”, "Failure to Yield Right-of-Way”, "Failure to Keep Right”, "Passing or Lane Usage Improper"
# “Mechanical Failure” - "Accelerator Defective”, "Brakes Defective”, "Tire Failure/Inadequate”, "Steering Failure”, "Headlights Defective”, "Tow Hitch Defective"
# “Unspecified” - “”, "Unspecified”,
# “NY Infrastructure issues” - "Shoulders Defective/Improper”, "Traffic Control Device Improper/Non-Working”, "Obstruction/Debris”, "Other Lighting Defects”, "Lane Marking Improper/Inadequate”, "Pavement Slippery”, "Pavement Defective"
# “Miscellaneous” -"Other Vehicular”, "Oversized Vehicle”,"Pedestrian/Bicyclist/Other Pedestrian Error/Confusion”,"Physical Disability"
# “Restricted view” - "View Obstructed/Limited”,"Windshield Inadequate”, "Glare”
levels(traffic$CONTRIBUTING.FACTOR.VEHICLE.1)
sort(table(traffic$CONTRIBUTING.FACTOR.VEHICLE.1))
#View(traffic[(traffic$CONTRIBUTING.FACTOR.VEHICLE.1 %in% 'Other Vehicular'),])
#View(traffic[traffic$CONTRIBUTING.FACTOR.VEHICLE.1 %in% 'Other Electronic Device',])
#View(traffic[traffic$CONTRIBUTING.FACTOR.VEHICLE.1 %in% 'Physical Disability',])
CONTRIBUTING.FACTOR.LEVELS= c('Unspecified', 'Mechanical Failure', 'Unsafe Driving' , 'Dizzy Driving' ,'Miscellaneous', 'Unsafe Driving', 'Mechanical Failure','Use of Electronic Devices', 'Use of Electronic Devices', 'Driver Distraction', 'Unsafe Driving', 'Rule Violations',
'Dizzy Driving', 'Rule Violations', 'Rule Violations', 'Driver Distraction', 'Driver Distraction', 'Unsafe Driving',
'Restricted View', 'Mechanical Failure', 'Driver Distraction', 'NY Infrastructure Issues', 'Driver Distraction' ,'NY Infrastructure Issues',
'Use of Electronic Devices', 'NY Infrastructure Issues', 'Miscellaneous', 'Driver Distraction', 'Miscellaneous', 'Driver Distraction',
'Rule Violations', 'NY Infrastructure Issues', 'NY Infrastructure Issues', 'Miscellaneous',
'Miscellaneous', 'Dizzy Driving', 'Driver Distraction', 'NY Infrastructure Issues',
'Mechanical Failure', 'Mechanical Failure', 'Mechanical Failure', 'NY Infrastructure Issues',
'Rule Violations', 'Rule Violations', 'Unsafe Driving', 'Unsafe Driving', 'Unspecified','Restricted View','Restricted View')
levels(traffic$CONTRIBUTING.FACTOR.VEHICLE.1)=CONTRIBUTING.FACTOR.LEVELS
str(traffic)
write.csv(x = traffic,file ='/Users/Ameet/Box Sync/Ameet/Classes/R/traffic/NYPD_Motor_Vehicle_CollisionsNew.csv')
