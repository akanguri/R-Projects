CAPrice = c(399.9),
EUPrice=c(499.9)
)
df=data.frame(UKPrice=c(199.99),
USPrice = c(299.99),
CAPrice = c(399.99),
EUPrice=c(499.99)
)
ave(c(df$UKPrice, df$USPrice, df$CAPrice, df$EUPrice),FUN=function(x) mean(x, na.rm = TRUE))
df=data.frame(UKPrice=c(199.99),
USPrice = c(299.99),
CAPrice = c(399.99),
EUPrice=c(NA)
)
ave(c(df$UKPrice, df$USPrice, df$CAPrice, df$EUPrice),FUN=function(x) mean(x, na.rm = TRUE))
mean(c(df$UKPrice, df$USPrice, df$CAPrice, df$EUPrice),rm=TRUE)
?mean
x <- c(0:10, 50)
xm <- mean(x)
x <- c(0:10)
mean(x)
mean(c(df$UKPrice, df$USPrice, df$CAPrice, df$EUPrice),rm=TRUE)
mean((df$UKPrice, df$USPrice, df$CAPrice, df$EUPrice),rm=TRUE)
mean(c(df$UKPrice, df$USPrice, df$CAPrice, df$EUPrice),rm=TRUE)
df=data.frame(UKPrice=c(199.99),
USPrice = c(299.99),
CAPrice = c(399.99),
EUPrice=c(499.99)
)
str(df)
levels(c(199.99, 299.99, 399.99, NA))
mean(c(df$UKPrice, df$USPrice, df$CAPrice, df$EUPrice),rm=TRUE)
mean(c(df$UKPrice, df$USPrice, df$CAPrice, df$EUPrice),rm=TRUE)
mean(c(df$UKPrice, df$USPrice, df$CAPrice, df$EUPrice),rm=TRUE)
df=data.frame(UKPrice=c(199.99),
USPrice = c(299.99),
CAPrice = c(399.99),
EUPrice=c(NA)
)
mean(c(df$UKPrice, df$USPrice, df$CAPrice, df$EUPrice),rm=TRUE)
install.packages(c("BH", "car", "colorspace", "data.table", "DBI", "digest", "ggplot2", "Matrix", "mgcv", "nlme", "R6", "Rcpp", "reshape2", "rpart.plot", "scales", "SparseM", "stringi", "stringr", "survival"))
```{r}
plot(cars)
setwd('/Users/Ameet/Box Sync/Ameet/Classes/R')
setwd('/Users/Ameet/Box Sync/Ameet/Classes/R')
library(caTools)
parole= read.csv("parole.csv")
setwd('/Users/Ameet/Box Sync/Ameet/Classes/R')
library(caTools)
parole= read.csv("parole.csv")
str(parole)
setwd('/Users/Ameet/Box Sync/Ameet/Classes/R')
library(caTools)
parole= read.csv("parole.csv")
str(parole)
summary(parole)
table(parole$violator)  # how many are violators
summary(parole)
setwd('/Users/Ameet/Box Sync/Ameet/Classes/R')
library(caTools)
parole= read.csv("parole.csv")
str(parole)
summary(parole)
table(parole$violator)  # how many are violators
summary(parole)
table(parole$violator)  # how many are violators
table(parole$violator)  # how many are violators
summary(parole)
table(parole$violator)  # how many are violators
table(parole$violator)  # how many are violators
summary(parole)
str(parole)
setwd('/Users/Ameet/Box Sync/Ameet/Classes/R')
parole= read.csv("parole.csv")
str(parole)
str(parole)
summary(parole)
table(parole$violator)  # how many are violators
597+78
# Convert male variable from 0,1 to women and men
# Convert race variable from 1,2 to White and 'Not White'
# Convert state variable from 1,2,3,4 to Other, Kentuchy, Lousiana and Virginia
# Convert crime variable from 1,2,3,3 to Other, Larceny, drug and driving
# Convert multiple.offences variable from 0,1 to no and yes
parole$male = factor(parole$male,
levels = c(0,1),
labels = c("women", "men"))
parole$race = factor(parole$race,
levels=c(1,2),
labels=c("White","Not White"))
parole$state = factor(parole$state,
levels = c(1,2,3,4),
labels = c("Other","Kentucky","Lousiana","Virginia"))
parole$crime = factor(parole$crime,
levels = c(1,2,3,4),
labels=c("Other","Larceny","drug","driving"))
parole$multiple.offenses = factor(parole$multiple.offenses,
levels = c(0,1),
labels = c("no", "yes"))
library(caTools)
set.seed(199)
split = sample.split(parole$violator,SplitRatio=0.7)
train = subset(parole,split==TRUE)
test = subset(parole,split==FALSE)
nrow(train)
nrow(test)
setwd('/Users/Ameet/Box Sync/Ameet/GitHub/R-Projects/parole')
# Read the file in memory as a dataframe to conduct analysis.
parole= read.csv("parole.csv")
str(parole)
# Review the range, mean and median for each variable of the dataset. This should give you some initial insight about the
# variables in the dataset. E.g. The median age of the parolee is 33.70 and average is 34.51
summary(parole)
# How many are parole violators in the sample data. Out of the 675 parolee 78 violated their parole
table(parole$violator)  # how many are violators
# converting non-metric variables to factor,
# levels argument ensures the order of the categories
# if the categories are already in the right order, the levels arg can be dropped
# Convert male variable from 0,1 to women and men
# Convert race variable from 1,2 to White and 'Not White'
# Convert state variable from 1,2,3,4 to Other, Kentuchy, Lousiana and Virginia
# Convert crime variable from 1,2,3,3 to Other, Larceny, drug and driving
# Convert multiple.offences variable from 0,1 to no and yes
parole$male = factor(parole$male,
levels = c(0,1),
labels = c("women", "men"))
parole$race = factor(parole$race,
levels=c(1,2),
labels=c("White","Not White"))
parole$state = factor(parole$state,
levels = c(1,2,3,4),
labels = c("Other","Kentucky","Lousiana","Virginia"))
parole$crime = factor(parole$crime,
levels = c(1,2,3,4),
labels=c("Other","Larceny","drug","driving"))
parole$multiple.offenses = factor(parole$multiple.offenses,
levels = c(0,1),
labels = c("no", "yes"))
# To build a model and test it, we first split the data given to use into train and test data sets
# The model will be built on the train data and tested on test data.This will allow us to assess the accuracy
# of our model. The split ratio is train - 70, test - 30.
library(caTools)
set.seed(199)
split = sample.split(parole$violator,SplitRatio=0.7)
train = subset(parole,split==TRUE)
test = subset(parole,split==FALSE)
str(train)
str(test)
nrow(train)
nrow(test)
model1 = glm(violator~.,train,family="binomial")
summary(model1)
setwd('/Users/Ameet/Box Sync/Ameet/Classes/R')
data = read.csv("eBayiPadTrain.csv")
data$description = as.character(data$description)
str(data)
# Data prep
levels(data$condition) = c('for parts or not working','refurbished','new','new','refurbished','used')
levels(data$carrier) = c('AT&T','None','Sprint/T-Mobile','Sprint/T-Mobile','Sprint/T-Mobile','Unknown','Verizon')
levels(data$storage) = c('128 GB','16/32/64 GB','16/32/64 GB','16/32/64 GB','Unknown')
levels(data$cellular) = c('No cellular','Cellular','Unknown')
levels(data$productline) = c('iPad 1','iPad 2','iPad 3','iPad 4','iPad 4','iPad Air 1/2','iPad Air 1/2','iPad mini','iPad mini 2','iPad mini3','iPad mini Retina','Unknown')
data$noDescription = as.numeric(data$description=="") # no. of blank reviews
data$charCountDescription = nchar(data$description)  # no. of char in review
data$upperCaseDescription = sapply(gregexpr("[A-Z]",data$description),function(x) sum(x>0)) # number of upper case characters
data$startprice_99end = as.numeric(grepl(pattern = "99$",x = data$startprice))
data$biddable = factor(data$biddable,labels=c('not biddable','biddable'))
#data$sold = factor(data$sold,labels=c('not sold','sold'))
data$noDescription = factor(data$noDescription,labels=c('no description','contains description'))
data$startprice_99end = factor(data$startprice_99end,labels=c('not a 99 ending','99 ending'))
data$description = NULL ## Text in description is not interpreted correctly in non-english OS
write.csv(data,'eBayClean.csv',row.names=F)
library(ggplot2)
data = read.csv('ebayClean.csv')
## Split the Data
library(caTools)
set.seed(100)
split = sample.split(data$sold,SplitRatio = 0.7)
train = data[split,]
test = data[!split,]
names(train)
str(parole)
names(parole)
tapply(train$startprice,train$sold,mean)
train$sold
train$startprice
?tapply(train$startprice,train$sold,mean)
n <- 17; fac <- factor(rep(1:3, length = n), levels = 1:5)
n
fac
table(fac)
tapply(1:n, fac, sum)
tapply(1:n, fac, sum, simplify = FALSE)
range
tapply(1:n, fac, range)
tapply(1:n, fac, quantile)
tapply(1:n, fac, sum)
tapply(1:3, fac, sum)
fac
tapply(1:n, fac, sum)
table(fac)
fac
1+4+7+10+13+16
2+5+8+11+14+17
fac
1:17
tapply(train$startprice,train$sold,mean)
ggplot(data=train,aes(x=factor(sold),y=startprice,fill=factor(sold)))+
geom_bar(stat='summary',fun.y='mean')
# biddable
tapply(train$sold,train$biddable,mean)
train$biddable
tapply(train$sold,train$biddable,mean)
ggplot(data=train,aes(x=biddable,y=sold,fill=biddable))+
geom_bar(stat='summary',fun.y='mean')
# condition
tapply(train$sold,train$condition,mean)
ggplot(data=train,aes(x=condition,y=sold,fill=condition))+
geom_bar(stat='summary',fun.y='mean')
tapply(train$sold,train$cellular,mean)
ggplot(data=train,aes(x=cellular,y=sold,fill=cellular))+
geom_bar(stat='summary',fun.y='mean')
# carrier
tapply(train$sold,train$carrier,mean)
ggplot(data=train,aes(x=carrier,y=sold,fill=carrier))+
geom_bar(stat='summary',fun.y='mean')
# carrier
tapply(train$sold,train$carrier,mean)
ggplot(data=train,aes(x=carrier,y=sold,fill=carrier))+
geom_bar(stat='summary',fun.y='mean')
setwd('/Users/Ameet/Box Sync/Ameet/GitHub/R-Projects/parole')
# Read the file in memory as a dataframe to conduct analysis.
parole= read.csv("parole.csv")
# Data Preparation Phase
# In this phase you review the data structure, data format of the source data and make the necessary changes to
# conduct the data analysis. At lot of the data is provided as integer values. Since these data are of categorial
# type, it makes more sense to covert it to a more readable format. E.g. male variable - male, female value
# is more readable compared to 0 and 1.
# Review the data variables
names(parole)
# Review the range, mean and median for each variable of the dataset. This should give you some initial insight about the
# variables in the dataset. E.g. The median age of the parolee is 33.70 and average is 34.51
summary(parole)
# How many are parole violators in the sample data. Out of the 675 parolee 78 violated their parole
table(parole$violator)  # how many are violators
# converting non-metric variables to factor,
# levels argument ensures the order of the categories
# if the categories are already in the right order, the levels arg can be dropped
# Convert male variable from 0,1 to women and men
# Convert race variable from 1,2 to White and 'Not White'
# Convert state variable from 1,2,3,4 to Other, Kentuchy, Lousiana and Virginia
# Convert crime variable from 1,2,3,3 to Other, Larceny, drug and driving
# Convert multiple.offences variable from 0,1 to no and yes
parole$male = factor(parole$male,
levels = c(0,1),
labels = c("women", "men"))
parole$race = factor(parole$race,
levels=c(1,2),
labels=c("White","Not White"))
parole$state = factor(parole$state,
levels = c(1,2,3,4),
labels = c("Other","Kentucky","Lousiana","Virginia"))
parole$crime = factor(parole$crime,
levels = c(1,2,3,4),
labels=c("Other","Larceny","drug","driving"))
parole$multiple.offenses = factor(parole$multiple.offenses,
levels = c(0,1),
labels = c("no", "yes"))
# To build a model and test it, we first split the data given to use into train and test data sets
# The model will be built on the train data and tested on test data.This will allow us to assess the accuracy
# of our model. The split ratio is train - 70, test - 30.
library(caTools)
set.seed(199)
split = sample.split(parole$violator,SplitRatio=0.7)
train = subset(parole,split==TRUE)
test = subset(parole,split==FALSE)
str(train)
str(test)
# We now have 473 records to train the model and 202 records to test it on.
nrow(train)
nrow(test)
names(parole)
tapply(train$male,train$violator,mean)
tapply(train$male,train$violator,sum)
train$male
train$violator
tapply(train$violator,train$male,mean)
geom_bar(stat='summary',fun.y='mean')
ggplot(data=train,aes(x=male,y=violator,fill=male))+
geom_bar(stat='summary',fun.y='mean')
names(train)
tapply(train$violator,train$race,mean)
ggplot(data=train,aes(x=race,y=violator,fill=race))+
geom_bar(stat='summary',fun.y='mean')
str(train)
tapply(train$age,train$violator,mean)
ggplot(data=train,aes(x=factor(violator),y=age,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')
?ggplot(data=train,aes(x=factor(violator),y=age,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')
? ggplot(data=train,aes(x=factor(violator),y=age,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')
? ggplot(data=train,aes(x=factor(violator),y=age,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')
? ggplot
? geom_text
tapply(train$age,train$violator,mean)
ggplot(data=train,aes(x=factor(violator),y=age,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')+
geom_text(label = c('Non-violator','Violator'))
ggplot(data=train,aes(x=factor(violator),y=age,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')
ggplot(data=train,aes(x=factor(violator),y=age,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')+
geom_text(aes(label = c('Non-violator','Violator')))
ggplot(data=train,aes(x=factor(violator),y=age,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')+
geom_text(aes(label = violator))
ggplot(data=train,aes(x=factor(violator),y=age,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')+
geom_text(aes(label = c('Non-violator','Violator')))
ggplot(data=train,aes(x=factor(violator),y=age,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')
ggplot(data=train,aes(x=factor(violator),y=age,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')+
xlab('Violator')+labs('Violator')
ggplot(data=train,aes(x=factor(violator),y=age,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')+
xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Non-violator"))
ggplot(data=train,aes(x=factor(violator),y=age,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')+
xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Violator"))
names(train)
tapply(train$violator,train$state,mean)
ggplot(data=train,aes(x=state,y=violator,fill=state))+
geom_bar(stat='summary',fun.y='mean')
# Time.server , Lousiana has the highest violators
tapply(train$time.served,train$violator,mean)
ggplot(data=train,aes(x=factor(violator),y=time.served,fill=factor.violator))+
geom_bar(stat='summary',fun.y='mean')
ggplot(data=train,aes(x=factor(violator),y=time.served,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')
tapply(train$time.served,train$violator,mean)
ggplot(data=train,aes(x=factor(violator),y=time.served,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')
# Time.server , Lousiana has the highest violators
tapply(train$time.served,train$violator,mean)
ggplot(data=train,aes(x=factor(violator),y=time.served,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')+
xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Violator"))
# Time.served , Violators have served lesser time in prision than non violators
tapply(train$time.served,train$violator,mean)
ggplot(data=train,aes(x=factor(violator),y=time.served,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')+
xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Violator"))+
scale_fill_discrete(name = "New Legend Title")
tapply(train$time.served,train$violator,mean)
ggplot(data=train,aes(x=factor(violator),y=time.served,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')+
xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Violator"))+
scale_fill_discrete(name = "Violators")
?  scale_fill_discrete(name = "Violators")
ggplot(data=train,aes(x=factor(violator),y=time.served,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')+
xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Violator"))+
labs(fill='NEW LEGEND TITLE')
ggplot(data=train,aes(x=factor(violator),y=time.served,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')+
xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Violator"))+
scale_fill_manual(name = "Violators",values=c("orange","red"))
ggplot(data=train,aes(x=factor(violator),y=time.served,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')+
xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Violator"))+
scale_fill_manual("Violators",values=c("orange","red"))
? scale_fill_discrete(name = "Violators")
?guide_legend
tapply(train$time.served,train$violator,mean)
ggplot(data=train,aes(x=factor(violator),y=time.served,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')+guide_legend()
xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Violator"))+
labs(fill='Violators')
ggplot(data=train,aes(x=factor(violator),y=time.served,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')+guide_legend()
xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Violator"))+
labs(fill='Violators')
ggplot(data=train,aes(x=factor(violator),y=time.served,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')+guide_legend()
xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Violator"))
tapply(train$time.served,train$violator,mean)
ggplot(data=train,aes(x=factor(violator),y=time.served,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')+guide_legend()
xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Violator"))
tapply(train$time.served,train$violator,mean)
ggplot(data=train,aes(x=factor(violator),y=time.served,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')+
xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Violator"))
tapply(train$time.served,train$violator,mean)
ggplot(data=train,aes(x=factor(violator),y=time.served,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')+
xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Violator"))
labs(fill='Violators')
tapply(train$time.served,train$violator,mean)
ggplot(data=train,aes(x=factor(violator),y=time.served,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')+
xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Violator"))+
labs(fill='Violators')
names(train)
tapply(train$max.sentence,train$violator,mean)
ggplot(data=train,aes(x=factor(violator),y=max.sentence,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')+
xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Violator"))+
labs(fill='Violators')
train$max.sentence
train$multiple.offenses
tapply(train$time.served,train$violator,mean)
tapply(train$multiple.offenses,train$violator,mean)
train$multiple.offenses
model1 = glm(violator~.,train,family="binomial")
summary(model1)
exp(model1$coefficient["multiple.offenses"])
summary(model1)
exp(model1$coefficient["multiple.offenses"])
exp(model1$coefficient["multiple.offensesyes"])
exp(model1$coefficient['multiple.offensesyes'])
exp(1.86)
model1 = glm(violator~.,train,family="binomial")
summary(model1)
exp(model1$coefficient['multiple.offensesyes'])
exp(1.86)
ggplot(data=train,aes(x=factor(violator),y=time.served,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')+
xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Violator"))+
scale_fill_discrete(name="Violators",
breaks=c('0', '1'),
labels=c('Non-Violator', 'Violator'))
ggplot(data=train,aes(x=factor(violator),y=age,fill=factor(violator)))+
geom_bar(stat='summary',fun.y='mean')+
xlab('Violator') + scale_x_discrete(labels=c("0" = "Non-violator", "1" = "Violator"))+
scale_fill_discrete(name="Violators",
breaks=c('0', '1'),
labels=c('Non-Violator', 'Violator'))
model1$coefficient['multiple.offensesyes']
model1 = glm(violator~.,train,family="binomial")
summary(model1)
exp(model1$coefficient['multiple.offensesyes'])
varCoefficients = c(model1$coefficient[1:13]) # list of all coefficients from model
varCoefficients
varScores
varScores = c(1,1,1,50,0,0,0,3,12,0,1,0,0)    # list of all var based on above description
logOdds = sum(varCoefficients*varScores)      # log odds is equal to sum of product of coeffs and var scores
oddsOfBeingAViolator
oddsOfBeingAViolator = exp(logOdds); oddsOfBeingAViolator # odds of being a violator
logOdds
oddsOfBeingAViolator
probabilityViolator
probabilityViolator = 1/(1+exp(-logOdds));probabilityViolator # probability of being a violator
probabilityViolator
# Applying predictions to test sample
predictTest = predict(model1,test,type="response")
summary(predictTest)
max(predictTest)
x = table(test$violator,predictTest>0.50)
x
accuracy = sum(x[1,1],x[2,2])/nrow(test); accuracy
specificity = x[1,1]/sum(x[1,1],x[1,2]); specificity
sensitivity = x[2,2]/sum(x[2,1],x[2,2]); sensitivity
baseline = (167+12)/(167+12+11+12); baseline
x = table(test$violator,predictTest>0.70);x
library(ROCR)
library(ROCR)
ROCRpred = prediction(predictTest,test$violator)
as.numeric(performance(ROCRpred,"auc")@y.values) # auc measure
ROCRperf = performance(ROCRpred,"tpr","fpr")
ROCRperf
plot(ROCRperf) # basic plot
plot(ROCRperf,xlab="1 - Specificity",ylab="Sensitivity") # relabled axes
plot(ROCRperf,colorize=TRUE) # color coded ROC curve
plot(ROCRperf,colorize=TRUE,print.cutoffs.at=seq(0,1,0.2),text.adj=c(-0.3,2)) # color coded and annotated ROC curve
baselinePred = test$violator*0
baselinePred
baselinePred
ROCRpredBaseline = prediction(baselinePred,test$violator)
ROCRpredBaseline
ROCRpredBaseline = prediction(baselinePred,test$violator)
ROCRpredBaseline
as.numeric(performance(ROCRpredBaseline,"auc")@y.values) # auc
ROCRperfBaseline = performance(ROCRpredBaseline,"tpr","fpr")
plot(ROCRperfBaseline) # plot for baseline
accuracy; specificity; sensitivity; baseline
x
library(rpart)
library(rpart.plot)
tree = rpart(violator~.,data=train,method="class",control=rpart.control(minbucket=2))
prp(tree)
predTree = predict(tree,newdata=test,type="class")
x = table(test$violator,predTree);x
accuracy = sum(x[1,1],x[2,2])/nrow(test); accuracy
specificity = x[1,1]/sum(x[1,1],x[1,2]); specificity
sensitivity = x[2,2]/sum(x[2,1],x[2,2]); sensitivity
predTree_train = predict(tree,data=train,type="class")
x = table(train$violator,predTree_train);x
accuracy = sum(x[1,1],x[2,2])/nrow(train); accuracy
specificity = x[1,1]/sum(x[1,1],x[1,2]); specificity
sensitivity = x[2,2]/sum(x[2,1],x[2,2]); sensitivity
predTree = predict(tree,newdata=test,type="class")
x = table(test$violator,predTree);x
accuracy = sum(x[1,1],x[2,2])/nrow(test); accuracy
specificity = x[1,1]/sum(x[1,1],x[1,2]); specificity
sensitivity = x[2,2]/sum(x[2,1],x[2,2]); sensitivity
library(rattle); fancyRpartPlot(tree)
install.packages('rattle')
library(rattle)
